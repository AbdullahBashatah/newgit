{
  "name": "vue-inbrowser-compiler",
  "version": "4.44.24",
  "description": "compile vue single file components right in your browser",
  "module": "lib/vue-inbrowser-compiler.esm.js",
  "main": "lib/vue-inbrowser-compiler.cjs.js",
  "types": "lib/types/index.d.ts",
  "keywords": [
    "vue",
    "compile",
    "live",
    "browser",
    "buble",
    "acorn"
  ],
  "dependencies": {
    "acorn": "^6.4.2",
    "acorn-jsx": "^5.3.1",
    "buble": "^0.20.0",
    "camelcase": "^5.3.1",
    "detect-browser": "^5.2.0",
    "vue-inbrowser-compiler-utils": "^4.44.23",
    "walkes": "^0.2.1"
  },
  "devDependencies": {
    "@rollup/plugin-commonjs": "15.1.0",
    "@rollup/plugin-node-resolve": "9.0.0",
    "@rollup/plugin-typescript": "8.3.0",
    "@types/buble": "0.20.1",
    "@vue/test-utils": "1.3.0",
    "rollup": "2.66.1",
    "typescript": "4.5.5",
    "vue": "2.6.14"
  },
  "peerDependencies": {
    "vue": ">=2"
  },
  "author": "Bart Ledoux <ledouxb@me.com>",
  "license": "MIT",
  "homepage": "https://vue-styleguidist.github.io",
  "repository": {
    "type": "git",
    "url": "https://github.com/vue-styleguidist/vue-styleguidist.git",
    "directory": "packages/vue-inbrowser-compiler"
  },
  "scripts": {
    "compile": "rollup -c",
    "compile:watch": "rollup -c --watch"
  },
  "readme": "# vue-inbrowser-compiler\n\nCompile vue components code into vue components objects inside of your browser\n\n## install\n\n```bash\nyarn add vue-inbrowser-compiler\n```\n\n## usage\n\nThis library is meant to help write components for vue that can be edited through text.\n\n### compile\n\nCompiles a string of pseudo javascript code written in es2015. It returns the body of a function as a string. Once you execute the function, it will return a VueJS component.\n\n**prototype**: `compile(code: string, config: BubleConfig): {script: string, style: string}`\n\n```js\nimport { compile } from 'vue-inbrowser-compiler'\n\n/**\n * render a component\n */\nfunction getComponent(code) {\n  const conpiledCode = compile(\n    code,\n    // pass in config options to buble to set up the output\n    {\n      target: { ie: 11 }\n    }\n  )\n  const func = new Function(conpiledCode.script)\n  return func()\n}\n```\n\nThe formats of the code here are the same as vue-live and vue-styleguidist\n\n#### pseudo jsx\n\nMost common use case is a simple vue template.\n\n```html\n<button color=\"blue\">Test This Buttton</button>\n```\n\nwill be transformed into\n\n```js\nreturn {\n  template: '<Button color=\"blue\">Test This Buttton</Button>'\n}\n```\n\nA more advanced use case if you want to use variables\n\n```jsx\n// initialize variables here and use them below\nlet show = true\nlet today = new Date();\n\n// starting from the first line that starts with a <tag>,\n// the rest is considered a template\n<input type=\"checkbox\" v-model=\"show\">\n<date-picker\n  style=\"text-align:center;\"\n  v-if=\"show\"\n  :value=\"today\"/>\n```\n\nwill turn into\n\n```js\nlet show = true\nlet today = new Date();\n\nreturn {\n    data(){\n        return{\n            show: show,\n            today: today\n        }\n    }\n    template: `<input type=\"checkbox\" v-model=\"show\">\n<date-picker\n  style=\"text-align:center;\"\n  v-if=\"show\"\n  :value=\"today\"/>`\n}\n```\n\n#### Vue apps\n\nA simple way to make it explicit\n\n```js\nnew Vue({\n  template: `\n<div>\n  <input v-model=\"value\" type=\"checkbox\">\n  <h1 v-if=\"value\">I am checked</h1>\n</div>`,\n  data() {\n    return {\n      value: false\n    }\n  }\n})\n```\n\n#### Single File Components\n\n```html\n<template>\n  <div class=\"hello\">\n    <h1>Colored Text</h1>\n    <button>{{ msg }}</button>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        msg: 'Push Me'\n      }\n    }\n  }\n</script>\n\n<style>\n  .hello {\n    text-align: center;\n    color: #900;\n  }\n</style>\n```\n\n### isCodeVueSfc\n\nDetects if the code given corresponds to a VueJS [Single File Component](https://vuejs.org/v2/guide/single-file-components.html). If there is a `<template>` or a `<script>` tag, it will return true, otherwise return false.\n\n**prototype**: `isCodeVueSfc(code: string):boolean`\n\n```js\nimport { isCodeVueSfc } from 'vue-inbrowser-compiler'\n\nif (isCodeVueSfc(code)) {\n  doStuffForSFC(code)\n} else {\n  doStuffForJSFiles(code)\n}\n```\n\n### addScopedStyle\n\nTakes the css style passed in first argument, scopes it using the suffix and adds it to the current page.\n\n**prototype**: `addScopedStyle(css: string, suffix: string):void`\n\n### adaptCreateElement\n\nIn order to make JSX work with the compiler, you need to specify a pragma. Since tis pragma has a different form for VueJs than for ReactJs, we need to provide an adapter.\n\n```js\nimport { compile, adaptCreateElement } from 'vue-inbrowser-compiler'\n\n/**\n * render a JSX component\n */\nfunction getComponent(code) {\n  const conpiledCode = compile(\n    code,\n    // in this config we set up the jsx pragma to a higher order function\n    {\n      jsx: '__pragma__(h)'\n    }\n  )\n  const func = new Function('__pragma__', conpiledCode.script)\n  // now pass the higher order function to the function call\n  return func(adaptCreateElement)\n}\n```\n"
}